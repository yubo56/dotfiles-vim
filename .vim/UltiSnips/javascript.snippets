snippet fun "Function" i
function ${1:function_name}(${2:argument}) {
	${3:// body...}
}
endsnippet
snippet fa "Anonymous Function" i
function(${1}) {${2}}
endsnippet
snippet fb "Anonymous Function w/ braces" i
function(${1}) {
	${2}
}
endsnippet
snippet if "if" i
if (${1:true}) {
	${2}
};
endsnippet
snippet ife "if ... else" i
if (${1:true}) {
	${2}
} else {
	${3}
};
endsnippet
snippet ? "tertiary conditional" i
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet
snippet switch "switch" i
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet
snippet case "case" i
case '${1:case}':
	${2:// code}
	break;
${3}
endsnippet
snippet for "for (...) {...}" i
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
	${4:$1[$2]}
};
endsnippet
snippet forr "for (...) {...} (Improved Native For-Loop)" i
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
	${4:$1[$2]}
};
endsnippet
snippet wh "while (...) {...}" i
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet
snippet :f "Object Method" i
${1:method_name}: function(${2:attribute}) {
	${4}
}${3:,}
endsnippet
snippet { "Braces" i
{
	${1}
}
endsnippet
snippet des "describe clause" i
describe('${1}', function() {
	${2}
});
endsnippet
snippet it "describe clause" i
it('${1}', function(${2:cb}) {
	${3}
});
endsnippet
snippet exp "Description" i
expect(${1}).to.equal(${2});
endsnippet
snippet cl "console.log" i
console.log('${1}', ${2:$1});
endsnippet
snippet err "Description" i
if (err) return cb(${1:err});
endsnippet
snippet /* "comment" i
/** ${1}
 */ ${2}
endsnippet
snippet cb "callback" i
cb(${1:null, }${2});
endsnippet
