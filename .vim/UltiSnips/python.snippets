snippet if "Description" b
if ${1}:
	${2}
endsnippet
snippet elif "Description" b
elif ${1}:
	${2}
endsnippet
snippet else "Description" b
else:
	${1}
endsnippet
snippet main "Description" b
if __name__ == '__main__':
	${1}
endsnippet
snippet #!
#!/usr/bin/python
endsnippet
snippet imp
import ${1:module}
endsnippet
snippet docs "Module Docstring"
'''
File: ${1:`Filename('$1.py', 'foo.py')`}
Author: ${2:`g:snips_author`}
Description: ${3}
'''
endsnippet
snippet wh
while ${1:condition}:
	${2:# code...}
endsnippet
snippet for
for ${1:needle} in ${2:haystack}:
	${3:# code...}
endsnippet
snippet cl "New Class"
class ${1:ClassName}(${2:object}):
	"""
	${3:docstring for $1}
	"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${6}
endsnippet
snippet def "New Function"
def ${1:fname}(${2:self}):
	"""
	${3:docstring for $1}
	"""
	${4:pass}
endsnippet
snippet deff
def ${1:fname}(${2:self}):
	${3}
endsnippet
snippet defs "New Method"
def ${1:mname}(self, ${2:arg}):
	${3:pass}
endsnippet
snippet property "New Property"
def ${1:foo}():
	doc = "${2:The $1 property.}"
	def fget(self):
		${3:return self._$1}
	def fset(self, value):
		${4:self._$1 = value}
endsnippet
snippet ld "Lambda"
${1:var} = lambda ${2:vars} : ${3:action}
endsnippet
snippet .
self.
endsnippet
snippet try Try/Except
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet
snippet try "Try/Except/Else"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet
snippet try "Try/Except/Finally"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet
snippet try "Try/Except/Finally"
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
finally:
	${6:pass}
endsnippet
snippet ifmain "if __name__ == '__main__':"
if __name__ == '__main__':
	${1:main()}
endsnippet
snippet _ "__magic__"
__${1:init}__${2}
endsnippet
snippet """ "docscring" b
"""
${1}
"""
endsnippet
snippet pr "print" i
print("=====`!v expand('%')`=====", "${1}"${2:, ${3:$1}})
endsnippet
snippet mpl "matplotlib" b
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
# plt.rc('text', usetex=True)
plt.rc('font', family='serif', size=20)
plt.rc('lines', lw=2.5)
plt.rc('xtick', direction='in', top=True, bottom=True)
plt.rc('ytick', direction='in', left=True, right=True)
plt.rc('xtick.minor', visible=True)
plt.rc('ytick.minor', visible=True)
plt.rc('figure', figsize=(6, 6), dpi=300)
plt.rc('figure.constrained_layout', use=True)
plt.rc('savefig', bbox='tight')
endsnippet
snippet subplots "subplots" b
fig, (ax1, ax2) = plt.subplots(
	2, 1,
	figsize=(6, 6),
	gridspec_kw={'height_ratios': [1, 1]},
	sharex=True)
endsnippet
snippet save "matplotlib save" b
plt.tight_layout()
plt.savefig(${1:fn})
plt.clf()
endsnippet
snippet pkl "pickle" b
# import os, pickle, lzma
pkl_fn = ${1}
if not os.path.exists(pkl_fn):
	print('Running %s' % pkl_fn)
	${VISUAL}
	with lzma.open(pkl_fn, 'wb') as f:
		pickle.dump((${2}), f)
else:
	with lzma.open(pkl_fn, 'rb') as f:
		print('Loading %s' % pkl_fn)
		$2 = pickle.load(f)
endsnippet
snippet rebound "rebound sim" b
ntimes = ${1}
times = np.linspace(0, ${2}, ntimes)
sim = rebound.Simulation()
sim.units = ('AU', 'Msun', 'yr')
sim.add(m=1, r=0)
sim.add(m=1e-3, r=0, a=1)
sim.add(m=3e-6, r=0, a=1.5)
${3}
sim.integrator = '${4}'
ps = sim.particles[1: ] # planet particles
npl = len(ps)
dat = np.zeros((6 * npl, ntimes))
for i, t in enumerate(times):
	sim.integrate(t)
	for j in range(npl):
		dat[6 * j, i] = ps[j].f
		dat[6 * j + 1, i] = ps[j].a
		dat[6 * j + 2, i] = ps[j].e
		dat[6 * j + 3, i] = ps[j].inc
		dat[6 * j + 4, i] = ps[j].omega
		dat[6 * j + 5, i] = ps[j].Omega
endsnippet
snippet pdb "pdb" b
import pdb
pdb.set_trace()
endsnippet
snippet legend "legend" b
${1:plt}.legend(
	${2}columnspacing=0.2,
	handletextpad=0.1,
	borderaxespad=0.2,
	borderpad=0.2,
)
endsnippet
