snippet if "Description" b
if ${1}:
	${2}
endsnippet
snippet elif "Description" b
elif ${1}:
	${2}
endsnippet
snippet else "Description" b
else:
	${1}
endsnippet
snippet main "Description" b
if __name__ == '__main__':
	${1}
endsnippet
snippet #!
#!/usr/bin/python
endsnippet
snippet imp
import ${1:module}
endsnippet
snippet docs "# Module Docstring"
'''
File: ${1:`Filename('$1.py', 'foo.py')`}
Author: ${2:`g:snips_author`}
Description: ${3}
'''
endsnippet
snippet wh
while ${1:condition}:
	${2:# code...}
endsnippet
snippet for
for ${1:needle} in ${2:haystack}:
	${3:# code...}
endsnippet
snippet cl "# New Class"
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1}"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${6}
endsnippet
snippet def "# New Function"
def ${1:fname}(${2:self}):
	"""${3:docstring for $1}"""
	${4:pass}
endsnippet
snippet deff
def ${1:fname}(${2:self}):
	${3}
endsnippet
snippet defs "# New Method"
def ${1:mname}(self, ${2:arg}):
	${3:pass}
endsnippet
snippet property "# New Property"
def ${1:foo}():
	doc = "${2:The $1 property.}"
	def fget(self):
		${3:return self._$1}
	def fset(self, value):
		${4:self._$1 = value}
endsnippet
snippet ld "# Lambda"
${1:var} = lambda ${2:vars} : ${3:action}
endsnippet
snippet .
self.
endsnippet
snippet try Try/Except
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet
snippet try Try/Except/Else
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet
snippet try Try/Except/Finally
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet
snippet try Try/Except/Else/Finally
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
finally:
	${6:pass}
endsnippet
snippet ifmain "# if __name__ == '__main__':"
if __name__ == '__main__':
	${1:main()}
endsnippet
snippet _ "# __magic__"
__${1:init}__${2}
endsnippet
